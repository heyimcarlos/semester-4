-- Practice 
-- 1. Produce a list of all customer names in which the first letter of the first and last names is in uppercase and the rest are in lowercase.

select substr('abcde', 0, 1) from dual;

select *
from customers c
where c.FirstName is not null and c.LastName is not null;

UPDATE customers
  SET 
    FirstName = substr(FirstName, 0,1) || lower(substr(FirstName, 2)),
    LastName = substr(LastName, 0,1) || lower(substr(LastName, 2))
  WHERE customer# = 1001;

select c.FirstName, c.LastName, concat(concat(c.FirstName, ' '), c.LastName) "name"
from customers c
where 
  c.FirstName = initcap(c.FirstName)
    and
  lower(substr(c.FirstName, 2)) = substr(c.FirstName, 2)
    and
  c.LastName = initcap(c.LastName)
    and
  lower(substr(c.LastName, 2)) = substr(c.LastName, 2);

-- 2. Create a list of all customer numbers along with text indicating whether the customer has been referred by another customer. Display the text “NOT REFERRED” if the customer wasn’t referred to JustLee Books by another customer or “REFERRED” if the customer was referred.

select c.Customer#, 
  -- a good example on how to conditionally generate text
  case
    when c.Referred is null then 'NOT REFERRED'
    else 'REFERRED'
  end "Referred or Not Referred"
from customers c;

-- 3. Determine the amount of total profit generated by the book purchased on order 1002. Display the book title and profit. The profit should be formatted to display a dollar sign and two decimal places. Take into account that the customer might not pay the full retail price, and each item ordered can involve multiple copies.

-- tables involved: orders, orderitems
select * from orders where order# = 1004;
select * from orderitems where order# = 1004;
select * from orderitems where isbn = 2491748320;
select * from books where isbn = 8843172113;

select b.title, to_char((oi.paideach - b.cost) * oi.quantity, '$999.00') "profit"
from orderitems oi
join books b on oi.isbn = b.isbn
where oi.order# = 1002;

select b.title, to_char(sum((oi.paideach - b.cost) * oi.quantity), '$999.00') "profit"
from orderitems oi
join books b on oi.isbn = b.isbn
where oi.order# = 1002
group by b.title;

-- 4. Display a list of all book titles and the percentage of markup for each book. The percentage of markup should be displayed as a whole number (that is, multiplied by 100) with no decimal position, followed by a percent sign (for example, .2793 = 28%). (The percentage of markup should reflect the difference between the retail and cost amounts as a percent of the cost.).

-- markup = (retail - cost) / cost

select round(0.275, 2) from dual;

select b.title,
  concat(to_char(round(((b.retail - b.cost) / cost), 2)) * 100, '%') as "markup"
from books b;


-- 5. Display the current day of the week, hour, minutes, and seconds of the current date setting on the computer you’re using.

select to_char(sysdate, 'Month dd, YYYY HH12:MI:SS') as now from dual;

-- 6. Create a list of all book titles and costs. Precede each book’s cost with asterisks so that the width of the displayed Cost field is 12.

select b.title,
  substr('************' || ' ' || b.cost, length('************' || ' ' || b.cost) - 12) as cost
from books b;

-- 7. Determine the length of data stored in the ISBN field of the BOOKS table. Make sure each different length value is displayed only once (not once for each book).

select distinct length(isbn) as "length"
from books;

-- 8. Using today’s date, determine the age (in months) of each book that JustLee sells. Make sure only whole months are displayed; ignore any portions of months. Display the book title, publication date, current date, and age.

-- 9. Determine the calendar date of the next occurrence of Wednesday, based on today’s date.

-- 10. Produce a list of each customer number and the third and fourth digits of his or her zip code. The query should also display the position of the first occurrence of a 3 in the customer number, if it exists.






